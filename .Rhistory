View(s3)
s0<-stores[stores$TotalSales>200,c("Total_Customers","BasketSize","Tenure")]
View(s0)
s0<-stores[stores$TotalSales>200,c("AcqCostPercust","BasketSize")]
View(s0)
s0<-stores[stores$TotalSales>200,c("Total_Customers","BasketSize","Tenure")]
View(s0)
s3<-stores[stores$TOtalSales>50,c("AcqCostPercust","BasketSize")]
View(s3)
s3<-stores[c("AcqCostPercust","BasketSize")]
View(s3)
s3<-stores[Stores$TotalSales>200,c("AcqCostPercust","BasketSize")]
s3<-stores[stores$TotalSales>200,c("AcqCostPercust","BasketSize")]
View(s3)
memory.size()
r1<-cbind(No_cust=stores$Total_Customers,Avg_transValue=stores$BasketSize,No_Years=stores$Tenure)
View(r1)
detach("package:plyr", unload=TRUE)
detach("package:psych", unload=TRUE)
library()
search()
detach("package:xlsx,xlsxjars")
detach(package:c("xlsx","xlsxjars"),unload=TRUE)
detach(package=c("xlsx","xlsxjars"),unload=TRUE)
Vectorize(detach)(name=paste0("package:",c("xlsx","XLConnect")),unload=T,character.only=T)
Vectorize(detach)(name=paste0("package:",c("xlsx","XLConnect")),unload=T,character.only=T)
Vectorize(detach)(name=paste0("package:",c("xlsx","XLConnect")),unload=T,character.only=T)
?Vectorize()
search()
q1<-subset(stores,TotalSales>100, select=c(1:10))
View(q1)
r1<-cbind(stores$TotalSales>200,No_cust=stores$Total_Customers,Avg_transValue=stores$BasketSize,No_Years=stores$Tenure)
View(r1)
stores$TotalCost<-stores$AcqCostPercust * stores$Total_Customers + stores$OperatingCost
stores$TotalCost<-stores$AcqCostPercust * stores$Total_Customers + stores$OperatingCost
View(stores)
stores<-transform(stores, TotalCost1=AcqCostPercust*Total_Customer + OperatingCost)
stores<-transform(stores, TotalCost1=AcqCostPercust*Total_Customers + OperatingCost)
View(stores)
install.packages("sas7bdat")
stores$TotalClass1[stores$TotalSales > 240]<-'High'
stores$TotalClass1[stores$TotalSales > 120 & stores$TotalSales <=240]<-'Average'
stores$TotalClass1[stores$TotalSales > 240]<-'Low'
View(stores)
stores$TotalClass1[stores$TotalSales > 240]<-'High'
stores$TotalClass1[stores$TotalSales > 120 & stores$TotalSales <=240]<-'Average'
stores$TotalClass1[stores$TotalSales > 120]<-'Low'
View(stores)
View(stores)
stores$TotalClass1[stores$TotalSales > 240]<-'High'
stores$TotalClass1[stores$TotalSales > 120 & stores$TotalSales <=240]<-'Average'
stores$TotalClass1[stores$TotalSales < 120]<-'Low'
View(stores)
stores$TotalClass2<-cut(stores$TotalSales,breaks=c(-Inf,120,240,Inf),label=c("Low",'Average','High'))
View(stores)
newstores1<-stores[order(stores$OperatingCost, decreasing = T),]
(newstores1<-stores[order(stores$OperatingCost, decreasing = T),])
View(newstores1)
newstores2<-stores[order(-(stores$OperatingCost)),]
View(newstores2)
newstores3<-stores[order(Location,TotalSales,deacreasing=T),]
newstores3<-stores[order(stores$Location,stores$TotalSales,deacreasing=T),]
newstores3<-stores[order(stores$Location,stores$TotalSales,deacreasing=F),]
newstores4<-with(stores,stores[order(StoreType,Location,-TotalSales),])
View(newstores4)
newstores3<-stores[order(stores$Location,stores$TotalSales,decreasing = T),]
View(newstores3)
source('E:/R-Programing/Codes/DataManipulation.R')
newstores5<-arrange(stores,storeName)
require(dplyr)
newstores5<-arrange(stores,storeName)
newstores5<-arrange(stores,StoreName)
View(newstores5)
newstores6<-arrange(stores,StoreName,desc(location))
newstores6<-arrange(stores,StoreName,desc(Location))
View(newstores6)
newstores7<-arrange(stores,-BasketSize)
View(newstores7)
detach(package:dplyr,unload = T)
UniqueVal<-unique(stores)
View(UniqueVal)
stores[duplicated(stores),]
duplicates<-stores[duplicated(stores$StoreName),]
View(duplicates)
duplicates<-stores[duplicated(stores$StoreName) & duplicated(stores$AcqCostPercust),]
View(duplicates)
View(stores)
UniqueVal<-unique(stores[stores$StoreName])
View(UniqueVal)
UniqueVal<-unique(stores)
View(UniqueVal)
stores[duplicated(stores),]
duplicates<-stores[duplicated(stores$StoreName) & duplicated(stores$AcqCostPercust),]
View(duplicates)
dg<-read.csv('E:/R-Programing/Datasets/Demographic_Data.csv',header = T)
ts<-read.csv('E:/R-Programing/Datasets/Transaction_Summary.csv',header = T)
head(dg)
head(ts)
head(dg)
head(ts)
head(dg)
head(ts)
View(head(dg))
View(head(ts))
dg_ts_inner<-merge(dg,ts, by.x = c('CustName'),by.y = c.('CustomerName'),all = F)
dg_ts_inner<-merge(dg,ts, by.x = c('CustName'),by.y = c('CustomerName'),all = F)
View(dg_ts_inner)
?merge()
dg_ts_inner<-merge(dg,ts, by.x = c('CustName'),by.y = c('CustomerName'),all = T)
View(dg_ts_inner)
dg_ts_inner<-merge(dg,ts, by.x = c('CustName'),by.y = c('CustomerName'),all = F)
View(dg_ts_inner)
dg_ts_full<-merge(dg,ts,by.x = c('CustName'),by.y = c('CustomerName'),all=T)
View(dg_ts_full)
dg_ts_Left<-merge(dd,ts,by.x=c('CustName'),by.y=c('CustomerName'),all.x=T)
dg_ts_Left<-merge(dg,ts,by.x=c('CustName'),by.y=c('CustomerName'),all.x=T)
View(dg_ts_left)
View(dg_ts_Left)
dg_ts_right<-merge(dg,ts,by.x = c('CustName'),by.y = c('CustomerName'),all.y=T)
View(dg_ts_right)
store_sales<-read.table(choose.files(),sep = ',',header = T)
view(store_sales)
View(store_sales)
summary(store_sales)
View(summary(store_sales))
?store_sales
names(store_sales)
v1<-names(store_sales)
v1<-names(store_sales)[3:13]
View(v1)
v1<-names(store_sales)[3:13]
View(v1)
names(store_sales)[3:13]
?reshape()
v1
store_sales.Wide_Long1<-reshape(store_sales,idvar = c('StoreID','City'),varing=v1,timevar = c('Month'),
v.names=c('Sales'),times=c("Jan_Sales","Feb_sales","Mar_sales","Apr_sales",
"May_Sales","June_sales","Jul_sales","Aug_sales",
"Sep_Sales","Oct_Sales","Nov_Sales" ),direction = 'long')
store_sales.Wide_Long1<-reshape(store_sales,idvar = c('StoreID','City'),varying = v1 ,timevar = c('Month'),
v.names=c('Sales'),times=c("Jan_Sales","Feb_sales","Mar_sales","Apr_sales",
"May_Sales","June_sales","Jul_sales","Aug_sales",
"Sep_Sales","Oct_Sales","Nov_Sales" ),direction = 'long')
View(store_sales.Wide_Long1)
(store_sales.Wide_Long1)
store_sales.long_wide<-reshape(store_sales.Wide_Long1,idvar = c('StoreID','City'),v.names = c('Sales')
timevar = c('Month'),direction='wide')
store_sales.long_wide<-reshape(store_sales.Wide_Long1,idvar = c('StoreID','City'),v.names = c('Sales'),
timevar = c('Month'),direction='wide')
View(store_sales.long_wide)
sample(stores$StoreCode,size=10)
View(sample(stores$StoreCode,size=10))
View(stores)
sample(stores$StoreCode,size=1)
sample(stores$StoreCode,size=2)
sample(stores$StoreCode,size=5)
sample(stores$StoreCode,size=10)
require(sampling)
df2<-stores
names(df2)
names(df2)[names(df2)=='StoreCode'] <- 'StoreID'
names(df2)
detach(package:dplyr)
library("dplyr", lib.loc="~/R/win-library/3.4")
detach("package:dplyr", unload=TRUE)
detach(package:dplyr,unload=T)
require(dplyr)
detach(package:dplyr,unload=T)
mydata<-rename(stores, c(Store='StoreCode',storeLoc='Location'))
require(reshape)
require(dplyr)
mydata<-rename(stores, c(Store='StoreCode',storeLoc='Location'))
install.packages('reshape')
stores1<-stores[c('StoreName','StoreType','Location','OperatingCost','Total_Customers','AcqCostPercust',
'BasketSize','ProfitPercust','OwnStore')]
stores1
View(stores1)
stores1<-stores[c(5,4,2,1,3,6:10)]
View(stores1)
s1<-table(stores$StoreType)
s2<-prop.table(s1)
rbind(s1,s2)
View(s1)
?table
?table()
?prop.table()
View(s2)
cbind(s1,s2)
Sys.time()
format(Sys.time(),format = '%b_%d_%y_%H_%M')
format(1:10)
format(1:10,trim=T)
zz<-data.frame('(row names)' = c('aaaaa','b'),check.names = F)
format(zz)
format(zz,justify = 'left')
format(13.7)
format(13.7, nsmall = 3)
format(c(6.0,13.1),digits = 2)
format(c(6.0,13.1,123),digits = 2)
format(c(6.0,13.1,123.234),digits = 2)
format(c(6.0,13.1,123.234),digits = 2,trim = T)
format(c(6.0,13.1,123.234),digits = 1,trim = T)
format(c(6.0,13.1,123.234),digits = 4,trim = T)
format(c(6.0,13.12,123.234),digits = 4,trim = T)
format(c(6.0,13.12,123.234),digits = 5,trim = T)
format(c(6,13.12,123.234),digits = 5,trim = T)
format(c(6,13.12,123.234),digits = 5,trim = F)
format(c(6.0,13.1),digits = 2,nsmall = 1)
format(c(6.0,13.1,123.234),digits = 2,nsmall = 1)
format(2^31-1)
format(2^31-1,scientific = T)
install.packages('reshape')
require(reshape)
mydata<-rename(stores, c(Store='StoreCode',storeLoc='Location'))reshape2
View(mydata)
mydata<-rename(stores, c(Store='StoreCode',storeLoc='Location'))
View(mydata)
install.packages('sampling')
require(sampling)
strata(data, stratanames=NULL ,size, method=c('srswor','srswr','poisson','systematic'),pik,description=F)
strata(data, stratanames=NULL , method=c('srswor','srswr','poisson','systematic'),pik,description=F)
?strata()
require(sampling)
strata(data, stratanames=NULL ,size, method=c('srswor','srswr','poisson','systematic'),pik,description=F)
strata(data, stratanames=NULL ,size, method=c("srswor","srswr","poisson","systematic"),pik,description=F)
strata(stores, stratanames=NULL ,size, method=c("srswor","srswr","poisson","systematic"),pik,description=F)
p=0.1
strat<-strata(d,stratanames = stratnum,size = size,method = 'srswor')
p=0.1
d=stores
stratum='Location'
Text=paste0('stores$',stratum)
size<-ceiling(table(eval(parse(text=Text))) *p)
strat<-strata(d,stratanames = stratum,size = size,method = 'srswor')
View(strat)
dsample<-getdata(d,strat)
table(dsample$Location)
View(dsample)
d1<-stores[!names(stores)%in%c('Gender')]
View(d1)
d1<-stores[!names(stores)%in%c('Location')]
View(d1)
require(plyr)
data1<-mutate(stores,S=TotalCost+OperationalCost)
data1<-mutate(stores,S=TotalCost+OperatingCost)
View(data1)
ds_ts_outer<-merge(dg,ts,by.x = c('CustName'),by.y = c('CustomerName'),all.y = F)
ds_ts_outer_left<-merge(dg,ts,by.x = c('CustName'),by.y = c('CustomerName'),all.y = F)
View(ds_ts_outer_left)
require(dplyr)
View(iris)
filter(iris,Sepal.Length>7)
slice(iris,10:15)
View(slice(iris,10:15))
select(iris,Sepal.Width,Petal.Length, Species)
select(iris,contains('.'))
select(iris,ends_with('Length'))
select(iris,everything())
select(iris,matches('.t.'))
select(iris,matches('.dt.'))
select(iris,matches('.gt.'))
select(iris,matches('.th.'))
select(iris,matches('.th'))
select(iris,num_range('x',1:5))
select(iris,num_range('L',1:5))
select(iris,num_range(1:5))
?num_range
?select
?select()
?num_range
?select()
mutate(iris,sepal=Sepal.length + Sepal.Width)
mutate(iris,sepal=Sepal.Length + Sepal.Width)
transmute(iris,sepal=Sepal.Length+Sepal.Width)
transmute(iris,sepal=Sepal.Length+Sepal.Width)
distinct(iris)
distinct(iris$Sepal.Length)
iris
v1<-distinct(iris)
v1
v1<-!distinct(iris)
-distinct(iris)
iris-distinct(iris)
arrange(iris,Petal.Width,desc(Sepal.Length))
top_n(iris,2,Sepal.Width)
top_n(iris,2,Sepal.Length)
arrange(iris,Petal.Width,desc(Sepal.Length))
summarise(iris, avg=mean(Sepal.Length))
summarise_each(iris,funs = mean())
summarise_each(iris,funs(mean)
summarise_each(iris,funs(mean))
summarise_each(iris,funs(mean))
View(iris)
group_by(iris,Species)
summarise(group_by(iris,Species),tot=sum(Sepal.Length),avg=mean(Sepal.Length))
summarise(group_by(iris,Species))
summarise(group_by(iris,Species),tot=sum(Sepal.Length),avg=mean(Sepal.Length))
iris %>% group_by(Species) %>% summarise(tot=sum(Sepal.Width),avg=mean(Sepal.Length))
iris %>% group_by(Species) %>% summarise(tot=sum(Sepal.Length),avg=mean(Sepal.Length))
iris %>% group_by(Species) %>% mutate(tot=sum(Sepal.Length),avg=mean(Sepal.Length))
count(iris, Species, wt=Sepal.Length)
top_n(group_by(iris,Species),2,Sepal.Width)
count(group_by(iris,Species))
count(group_by(iris,Species),Species,wt=Sepal.Width)
count(iris,Species,wt=Sepal.Width)
count(iris,wt=Sepal.Width)
glimpse(iris)
rename(iris,wt=Sepal.Length)
v1<-rename(iris,wt=Sepal.Length)
?rename()
rename(iris,sepal_length=Sepal.Length)
detach(package:reshape,unload = T)
rename(iris,sepal_length=Sepal.Length)
sessionInfo()
detach(package:plyr,unload = T)
rename(iris,sepal_length=Sepal.Length)
count(iris,Species,wt=Sepal.Width)
group_by(iris,Species)
summarise(group_by(iris,Species),tot=sum(Sepal.Length),avg=mean(Sepal.Length))
iris %>% group_by(Species) %>% summarise(tot=sum(Sepal.Length),avg=mean(Sepal.Length))
iris %>% group_by(Species) %>% mutate(tot=sum(Sepal.Length),avg=mean(Sepal.Length))
a<-read.csv(choose.files(),header = T)
a<-read.csv('E:/R-Programing/Datasets/Demographic_Data.csv',header = T)
b<-read.csv('E:/R-Programing/Datasets/Transaction_Summary.csv',header = T)
left_join(a,b,by=c('CustName' = 'CustomerName'))
right_join(a,b,by=c('CustName'='CustomerName'))
inner_join(a,b,by=c('CustName'='CustomerName'))
full_join(a,b,by=c('CustName'='CustomerName'))
semi_join(a,b,by=c('CustName'='CustomerName'))
anti_join(a,b,by=c('CustName'='CustomerName'))
x<-read.csv('E:/R-Programing/Datasets/Score.csv',header = T)
y<-read.csv('E:/R-Programing/DataSets for R sessions/Score1.csv',header = T)
y<-read.csv('E:/R-Programing/DataSets/Score1.csv',header = T)
x<-read.csv('E:/R-Programing/Datasets/Score.csv',header = T)
intersect(x,y)
union(x,y)
setdiff(x,y)
bind_cols(x,y)
bind_rows(x,y)
sample_frac(iris,0.5,replace = T)
sample_frac(iris,1,replace = T)
sample_frac(iris,0.5,replace = T)
?sample
View(sample_frac(iris,0.5,replace = T))
View(sample_frac(iris,1,replace = T))
View(sample_frac(iris,2,replace = T))
View(sample_frac(iris,0.1,replace = T))
View(sample_frac(iris,0.1,replace = F))
View(sample_frac(iris,0.1,replace = T))
sample_n(iris,10,replace = T)
require(sqldf)
newdf<-sqldf('Select * from dg as a left join ts as b on a.CustName=b.CustomerName')
View(newdf)
sqldf('select avg(OperatingCost) as avg_OperatingCOst, avg(TOtalSales) as avg_TotalSales,
Tenure from stores where Staff_Cnt > 50 group by Tenure')
ds_sum<-function(ds){
h<head(ds)
t<-tail(ds)
s<-str(ds)
d<-dim(ds)
n<-ncol(ds)
na<-names(ds)
l<-length(ds)
return(list(head=h,tail=t,structure=s,dim=d,ncol=n,names=na,l))
}
stores_sum<-ds_sum(stores)
ds_sum<-function(ds){
h<head(ds)
t<-tail(ds)
s<-str(ds)
d<-dim(ds)
n<-ncol(ds)
na<-names(ds)
l<-length(ds)
return(list(head=h,tail=t,structure=s,dim=d,ncol=n,names=na,l))
}
ds_sum<-function(ds){
h<-head(ds)
t<-tail(ds)
s<-str(ds)
d<-dim(ds)
n<-ncol(ds)
na<-names(ds)
l<-length(ds)
return(list(head=h,tail=t,structure=s,dim=d,ncol=n,names=na,l))
}
stores_sum<-ds_sum(stores)
View(stores_sum)
stores_sum$head
?%%
?class
for(i in 1:15){
print('Missing Value Summary')
print(colnames(stores)[i])
print(class(stores[,i]))
print(sum(is.na(stores[i]))/length(stores[i]))
}
is.na(stores[1])
is.na(stores[2])
is.na(stores[3])
is.na(stores[5])
is.na(stores[6])
is.na(stores[7])
is.na(stores[TotalCost])
is.na(store[10])
is.na(stores[10])
is.na(stores[11])
is.na(stores[12])
for(i in 1:15){
print('Missing Value Summary')
print(colnames(stores)[i])
print(class(stores[,i]))
print(sum(is.na(stores[i]))/length(stores[i]))
}
for(i in 1:15){
print('Missing Value Summary')
print(colnames(stores)[i])
print(class(stores[,i]))
print(sum(is.na(stores[i]))/length(stores[i]))
print(summary(train[,i]))
}
is.na(stores[9])
sum(is.na(stores[9]))
length(stores[9])
length(stores[1:10])
length(stores[,9])
length(stores[9])
for(i in 1:15){
summary1[i]<-sum(is.na(stores[i]))/length(stores[i])
}
for(i in 1:15){
summary1[i] = sum(is.na(stores[i]))/length(stores[i])
}
for(i in 1:15){
sum(is.na(stores[i]))/length(stores[i]) <- summary1[i]
}
for(i in 1:15){
sum(is.na(stores[i]))/length(stores[i]) = summary1[i]
}
sum(is.na(stores[i]))/length(stores[i])
for(i in 1:15){
summary1 <- sum(is.na(stores[i]))/length(stores[i])
}
summary1
m<-matrix(c(1:20),nrow=10,ncol = 2)
m
m<-matrix(c(1:10,11:20),nrow=10,ncol = 2)
m
m<-matrix(c(1:20),nrow=10,ncol = 2)
m
apply(m,1,sum)
apply(m,2,sum)
apply(m,2,mean)
apply(m,1:2,function(x) x/2)
l<-list(a=1:10,b=11:15)
l
?lapply()
?apply()
?lapply
lapply(l,mean)
lapply(l,sum)
l<-list(a=1:10,b=11:15,m)
l
l<-list(a=1:10,b=11:15,c=m)
l
lapply(l,mean)
lapply(l,sum)
sapply(l,mean)
length(l)
class(sapply(l,mean))
class(lapply(l,sum))
class(lapply(l,mean))
l.mean <- sapply(l,mean)
class(l.mean)
l.mean[['a']]
l.fivenum <- vapply(l,fivenum,c(Min.=0,'1st Qu.'=0,Median=0,'3rd Qu'=0,Max.=0))
l.fivenum
l.fivenum <- vapply(l,sixnum,c(Min.=0,'1st Qu.'=0,Median=0,'3rd Qu'=0,Max.=0))
l.fivenum <- vapply(l,fivenum,c(Min.=0,'1st Qu.'=0,Median=0,'3rd Qu'=0,Max.=0))
l.fivenum
?fivenum
class(l.fivenum)
l1<-list(a=c(1:10),b=11:20)
l2<-list(a=c(21:30),d=c(31:40))
mapply(sum,l1$a,l1$b, l2$c , l2$d)
l1$a
l1$b
mapply(sum,l1$a,l1$b,l2$c,l2$d)
l1<-list(a=c(1:10),b=c(11:20))
l2<-list(a=c(21:30),d=c(31:40))
mapply(sum,l1$a,l1$b,l2$c,l2$d)
l2<-list(c=c(21:30),d=c(31:40))
mapply(sum,l1$a,l1$b,l2$c,l2$d)
rapply(l,log2)
class(rapply(l,log2))
rapply(l,sqrt)
rapply(l,square)
rapply(l,power(2))
rapply(l,power(lambda = 2))
rapply(l,log)
rapply(l,log,how = 'list')
class(rapply(l,log,how = 'list'))
rapply(l,mean)
rapply(l,mean,how = list)
rapply(l,mean,how = 'list')
?attach
tapply(iris$Petal.Length,Species,mean)
attach(iris)
tapply(iris$Petal.Length,Species,mean)
tapply(iris$Petal.Length,Species,mean)
getwd()
2
